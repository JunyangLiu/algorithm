package 队列和栈;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.junit.Test;
public class TwoStacksSort {
	/*
	 * 题目：请编写一个程序，按升序对栈进行排序（即最大元素位于栈顶），
	 * 要求最多只能使用一个额外的栈存放临时数据，但不得将元素复制到别的数据结构中
	 * 给定一个int[] numbers(C++中为vector&ltint>)，其中第一个元素为栈顶，
	 * 请返回排序后的栈。请注意这是一个栈，意味着排序过程中你只能访问到第一个元素。
	 * 测试样例：
	 * [1,2,3,4,5]
	 * 返回：[5,4,3,2,1]
	 */
	
    public ArrayList<Integer> twoStacksSort(int[] numbers) {
    int [] help=new int[numbers.length];
    int i=-1;//help数组顶部元素的指针
    int n=numbers.length-1;//numbers数组顶部元素的指针   
    while(n>=0){
    	int key=numbers[n];
    	if(i==-1){
    		help[++i]=key;
    	}else{
    		if(key<=help[i]){
    			i++;
    			help[i]=key;
    		}else{
    			int j=i;
    			while(key>help[j]&&j>=0){
    				System.out.println("~~");
    				help[j+1]=help[j];
    				j--;
    			}
    			help[j+1]=key;
    			i++;
    		}
    	}
    	n--;
    }
    ArrayList<Integer> result=new ArrayList<>();
    for(int a=help.length-1;a>=0;a--){
    	result.add(help[a]);
    }
    return result;
    }
   
    @Test
	   public void test(){
		   int[] A={7,6,4,8,0};
		   twoStacksSort(A);
	   }  
}
