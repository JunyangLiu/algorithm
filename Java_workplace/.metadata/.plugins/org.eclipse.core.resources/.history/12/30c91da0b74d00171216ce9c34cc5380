package 队列和栈;

import java.util.ArrayList;
import java.util.Stack;

import org.junit.Test;
public class TwoStacksSort {
	/*
	 * 题目：请编写一个程序，按升序对栈进行排序（即最大元素位于栈顶），
	 * 要求最多只能使用一个额外的栈存放临时数据，但不得将元素复制到别的数据结构中
	 * 给定一个int[] numbers(C++中为vector&ltint>)，其中第一个元素为栈顶，
	 * 请返回排序后的栈。请注意这是一个栈，意味着排序过程中你只能访问到第一个元素。
	 * 测试样例：
	 * [1,2,3,4,5]
	 * 返回：[5,4,3,2,1]
	 */
	private Stack<Integer> stack1=new Stack<>();
	private Stack<Integer> stack2=new Stack<>();
    public ArrayList<Integer> twoStacksSort(int[] numbers) {
    	ArrayList<Integer> result=new ArrayList<>();
        for(int i=0;i<numbers.length;i++){
        	stack1.push(numbers[i]);
        }
        while(!stack1.isEmpty()){
        	int current=stack1.pop();
        	if(current<=stack2.peek()||stack2.isEmpty()){
        		stack2.push(stack1.pop());
        	}else{
        		int count=0;
        		while(current>stack2.peek()){
        			stack1.push(stack2.pop());
        			count++;
        		}
        		stack2.push(count);
        		while(count>0){
        			stack2.push(stack1.pop());
        			count--;
        		}
        	}
        }
        
       while(!stack2.isEmpty()){
    	   stack1.push(stack2.pop());   	   
       }
       while(!stack1.isEmpty()){
    	   result.add(stack1.pop());
       }
//       for(Integer a:result){
//    	   System.out.print(a+" ");
//       }
       System.out.println("sadasdasdas");
       return result;
    }
   
    @Test
	   public void test(){
		   int[] A={7,6,4,8,0};
		   twoStacksSort(A);
	   }  
}
