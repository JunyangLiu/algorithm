package 排序算法;

import org.junit.Test;

public class Others {
	/*
	对于一个数组，请设计一个高效算法计算需要排序的最短子数组的长度。
	给定一个int数组A和数组的大小n，请返回一个二元组，
	代表所求序列的长度。(原序列位置从0开始标号,若原序列有序，返回0)。
	保证A中元素均为正整数。
	测试样例：[1,4,6,5,9,10],6
	返回：2
	*/
    public int shortestSubsequence(int[] A, int n) {
    	int max=A[0];
    	int min=A[n-1];
    	int right=0;
    	int left=0;
    	for(int i=1;i<n;i++){
    		if(max>A[i]){
    			right=i;
    		}else{
    			max=A[i];
    		}
    	}
    	for(int i=n-2;i>=0;i--){
    		if(min<A[i]){
    			left=i;
    		}else{
    			min=A[i];
    		}
    	}
    	System.out.println("left="+left+"right="+right);
    	return right-left+1;
    }
    @Test
    public void test(){
    	   int[] A={1,2,3,3,8,9};
//    	   int[] A={12,8,14};
//    	   BuildHeap(A, 1, 3);
    	System.out.println(shortestSubsequence(A, 6));
    	  SortUtils.printArray(A);
    }  
}
